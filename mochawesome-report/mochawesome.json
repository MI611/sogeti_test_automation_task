{
  "stats": {
    "suites": 5,
    "tests": 19,
    "passes": 19,
    "pending": 0,
    "failures": 0,
    "start": "2020-08-16T12:44:44.322Z",
    "end": "2020-08-16T12:44:48.652Z",
    "duration": 4330,
    "testsRegistered": 19,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "9671956e-73ed-479d-b963-f2a5a16b1026",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [
        {
          "title": "\"after each\" hook in \"{root}\"",
          "fullTitle": "\"after each\" hook in \"{root}\"",
          "timedOut": false,
          "duration": 0,
          "state": null,
          "speed": null,
          "pass": false,
          "fail": false,
          "pending": false,
          "context": null,
          "code": "checkForUnfulfilledExpectations.call(this);\nrecordedExpects = [];",
          "err": {},
          "uuid": "dda48a56-76a0-4860-a7e2-32749dec75ca",
          "parentUUID": "9671956e-73ed-479d-b963-f2a5a16b1026",
          "isHook": true,
          "skipped": false
        }
      ],
      "tests": [],
      "suites": [
        {
          "uuid": "c537189a-9c1d-4c45-a2dc-4c103a02324d",
          "title": "Test Case 1",
          "fullFile": "/Users/Migii/Desktop/sogeti_test_automation_task/sogeti_test_automation_task/test/firsttestcase_test.js",
          "file": "/test/firsttestcase_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should navigate to sogeti.com hover over Services, click automation and check for active links and content",
              "fullTitle": "Test Case 1 should navigate to sogeti.com hover over Services, click automation and check for active links and content",
              "timedOut": false,
              "duration": 10,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let _this = this;\n(async function checkVisibilityOfPageAndText() {\n    let driver = await new Builder().forBrowser('chrome').build();\n    try {\n        await driver.get(linkToOpen);\n        console.log('Opened ' + linkToOpen);\n        await driver.sleep(2000);\n        await hoverLink(driver, elementToHover);\n        assertPageTitle = await clickLink(driver, elementToClick, elementText).then((pTitle) => {\n            return pTitle;\n        });\n        console.log(\"page title: \" + assertPageTitle);\n        await driver.sleep(3000);\n        await hoverLink(driver, elementToHover);\n    } finally {\n        await driver.quit();\n    }\n})()",
              "err": {},
              "uuid": "00b22f53-30f4-4069-8018-159adcdb1271",
              "parentUUID": "c537189a-9c1d-4c45-a2dc-4c103a02324d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "00b22f53-30f4-4069-8018-159adcdb1271"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 10,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "29e30f39-1f98-49ed-8698-74b04391fd15",
          "title": "Test Case 2",
          "fullFile": "/Users/Migii/Desktop/sogeti_test_automation_task/sogeti_test_automation_task/test/secondtestcase_test.js",
          "file": "/test/secondtestcase_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should navigate to sogeti.com hover over Services, click automation, scroll down to contact form, insert data and submit form to get thank you message",
              "fullTitle": "Test Case 2 should navigate to sogeti.com hover over Services, click automation, scroll down to contact form, insert data and submit form to get thank you message",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(async function goToAutomationPageContactInputDataAndSubmit() {\n    let driver = await new Builder().forBrowser('chrome').build();\n    try {\n        await driver.get(linkToOpen);\n        console.log('Opened ' + linkToOpen);\n        await driver.sleep(2000);\n        await hoverLinkAndClickToNavigate(driver, elementToHover, elementToClick, elementText);\n        await driver.sleep(1000);\n        await scrollToElement(driver, scrollElementID);\n        //Generate data, input and submit\n        let randomFirstName = await faker.name.firstName();\n        let randomLastName = await faker.name.lastName();\n        let randomEmail = await faker.internet.email();\n        let randomPhone = await faker.phone.phoneNumber();\n        let randomMessage = await faker.lorem.sentence();\n        //extra\n        await checkContactFormValidations(driver);\n        await inputRandomGeneratedDataAndSubmitWithCheckbox(driver, randomFirstName, randomLastName, randomEmail, randomPhone, randomMessage);\n        await driver.sleep(5000);\n    } finally {\n        await driver.quit();\n    }\n})();",
              "err": {},
              "uuid": "06bcaf12-0083-4226-b320-0ec5e78c0b6d",
              "parentUUID": "29e30f39-1f98-49ed-8698-74b04391fd15",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "06bcaf12-0083-4226-b320-0ec5e78c0b6d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "58f66b22-370e-4073-9b0b-c5d9a8f49015",
          "title": "Test Case 3",
          "fullFile": "/Users/Migii/Desktop/sogeti_test_automation_task/sogeti_test_automation_task/test/thirdtestcase_test.js",
          "file": "/test/thirdtestcase_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should navigate to sogeti.com click on worldwide and check if every link works as expected",
              "fullTitle": "Test Case 3 should navigate to sogeti.com click on worldwide and check if every link works as expected",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(async function checkWorldwideLinksOfSogetiPage() {\n    let driver = await new Builder().forBrowser('chrome').build();\n    try {\n        await driver.get(linkToOpen);\n        console.log('Opened ' + linkToOpen);\n        await driver.sleep(1000);\n        await checkMultipleLinksWorking(driver);\n        await driver.sleep(2000);\n    } finally {\n        await driver.quit();\n    }\n})();",
              "err": {},
              "uuid": "d2caa254-1464-416c-9fdf-370958bceccb",
              "parentUUID": "58f66b22-370e-4073-9b0b-c5d9a8f49015",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "d2caa254-1464-416c-9fdf-370958bceccb"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "5552746a-9ee3-4be3-a63c-340daaaf339a",
          "title": "Zippopotam API",
          "fullFile": "/Users/Migii/Desktop/sogeti_test_automation_task/sogeti_test_automation_task/test/zippopotamapi_test.js",
          "file": "/test/zippopotamapi_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return a response with HTTP code 200",
              "fullTitle": "Zippopotam API should return a response with HTTP code 200",
              "timedOut": false,
              "duration": 724,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = chakram.get(\"http://api.zippopotam.us/de/bw/stuttgart\");\nexpect(response).to.have.status(200);\nreturn chakram.wait();",
              "err": {},
              "uuid": "777fd71b-1539-4c88-8804-085c4c5350c7",
              "parentUUID": "5552746a-9ee3-4be3-a63c-340daaaf339a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have a response time below 1s",
              "fullTitle": "Zippopotam API should have a response time below 1s",
              "timedOut": false,
              "duration": 307,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let request = chakram.get(\"http://api.zippopotam.us/de/bw/stuttgart\");\nreturn expect(request).to.have.responsetime(999);",
              "err": {},
              "uuid": "42cd7baa-37c3-4d89-83e9-5f8ca45cfeb8",
              "parentUUID": "5552746a-9ee3-4be3-a63c-340daaaf339a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return country Germany and state Baden-WÃ¼rttemberg",
              "fullTitle": "Zippopotam API should return country Germany and state Baden-WÃ¼rttemberg",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = chakram.get(\"http://api.zippopotam.us/de/bw/stuttgart\").then((resp) => {\n    expect(resp.body.country).to.equal('Germany');\n    expect(resp.body.country).to.equal('Baden-WÃ¼rttemberg');\n    return chakram.wait();\n});",
              "err": {},
              "uuid": "b87f069c-6402-4c10-bcc2-4329b5ea6afc",
              "parentUUID": "5552746a-9ee3-4be3-a63c-340daaaf339a",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have place name Stuttgart Degerloch for post code 70597",
              "fullTitle": "Zippopotam API should have place name Stuttgart Degerloch for post code 70597",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let response = chakram.get(\"http://api.zippopotam.us/de/bw/stuttgart\").then((resp) => {\n    for (let place in resp.body.places) {\n        if (place['post code'] == 70597) {\n            expect(place['place name']).to.equal('Stuttgart Degerloch');\n        }\n    }\n    return chakram.wait();\n});",
              "err": {},
              "uuid": "60a6a4d4-4353-4022-8b74-a2bb1265b222",
              "parentUUID": "5552746a-9ee3-4be3-a63c-340daaaf339a",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "777fd71b-1539-4c88-8804-085c4c5350c7",
            "42cd7baa-37c3-4d89-83e9-5f8ca45cfeb8",
            "b87f069c-6402-4c10-bcc2-4329b5ea6afc",
            "60a6a4d4-4353-4022-8b74-a2bb1265b222"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1033,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
          "title": "Zippopotam API data driven test - When the links are working as expected it ...",
          "fullFile": "/Users/Migii/Desktop/sogeti_test_automation_task/sogeti_test_automation_task/test/zippopotamapidatadriven_test.js",
          "file": "/test/zippopotamapidatadriven_test.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should return 200 for request http://api.zippopotam.us/us/90210",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should return 200 for request http://api.zippopotam.us/us/90210",
              "timedOut": false,
              "duration": 819,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        expect(res,`... instead got ${ res.status}`).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "9536abb5-36e1-44fc-975b-b3fb8a4559fe",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have content type JSON for request http://api.zippopotam.us/us/90210",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should have content type JSON for request http://api.zippopotam.us/us/90210",
              "timedOut": false,
              "duration": 221,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        expect(res,`... instead got ${ res.header['content-type']}`).to.have.header('content-type', 'application/json');\n        done();\n    });",
              "err": {},
              "uuid": "7fc90047-0c11-4694-984c-e101c3ab84e7",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have a response time below 1s for request http://api.zippopotam.us/us/90210",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should have a response time below 1s for request http://api.zippopotam.us/us/90210",
              "timedOut": false,
              "duration": 213,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let start = new Date();\nchai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        let responseTime = new Date() - start;\n        expect(responseTime,`... instead took ${ responseTime }`).to.have.below(1000);\n        done();\n    });",
              "err": {},
              "uuid": "a18257ef-7dd8-4a0f-ae2e-8d20418a2348",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have country: us and postal code: 90210 for place name: Beverly Hills",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should have country: us and postal code: 90210 for place name: Beverly Hills",
              "timedOut": false,
              "duration": 215,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let start = new Date();\nchai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        expect(res.body['country abbreviation'],`... instead having ${ res.body['country abbreviation'] }`).to.equal(country.toUpperCase());\n        expect(res.body['post code'],`... instead having ${ res.body['post code'] }`).to.equal(postal_code);\n        expect(res.body.places[0]['place name'],`... instead having ${ res.body.places[0]['place name'] }`).to.equal(place_name);\n        done();\n    });",
              "err": {},
              "uuid": "432c8dca-e26a-4f0e-8d90-b2ab3a9d909f",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for request http://api.zippopotam.us/us/12345",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should return 200 for request http://api.zippopotam.us/us/12345",
              "timedOut": false,
              "duration": 245,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        expect(res,`... instead got ${ res.status}`).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "d7a1e124-15d8-4005-b0ac-b6ad3407375c",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have content type JSON for request http://api.zippopotam.us/us/12345",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should have content type JSON for request http://api.zippopotam.us/us/12345",
              "timedOut": false,
              "duration": 220,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        expect(res,`... instead got ${ res.header['content-type']}`).to.have.header('content-type', 'application/json');\n        done();\n    });",
              "err": {},
              "uuid": "79ffd79d-42f6-4fde-87e6-95ff5bf2d4da",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have a response time below 1s for request http://api.zippopotam.us/us/12345",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should have a response time below 1s for request http://api.zippopotam.us/us/12345",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let start = new Date();\nchai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        let responseTime = new Date() - start;\n        expect(responseTime,`... instead took ${ responseTime }`).to.have.below(1000);\n        done();\n    });",
              "err": {},
              "uuid": "82af3c20-4725-4be5-a9ec-c1a97717c632",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have country: us and postal code: 12345 for place name: Schenectady",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should have country: us and postal code: 12345 for place name: Schenectady",
              "timedOut": false,
              "duration": 208,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let start = new Date();\nchai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        expect(res.body['country abbreviation'],`... instead having ${ res.body['country abbreviation'] }`).to.equal(country.toUpperCase());\n        expect(res.body['post code'],`... instead having ${ res.body['post code'] }`).to.equal(postal_code);\n        expect(res.body.places[0]['place name'],`... instead having ${ res.body.places[0]['place name'] }`).to.equal(place_name);\n        done();\n    });",
              "err": {},
              "uuid": "08a625a8-d496-4e21-b87f-906a9b695063",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 200 for request http://api.zippopotam.us/ca/B2R",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should return 200 for request http://api.zippopotam.us/ca/B2R",
              "timedOut": false,
              "duration": 211,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        expect(res,`... instead got ${ res.status}`).to.have.status(200);\n        done();\n    });",
              "err": {},
              "uuid": "2ae84000-0c3e-4bbe-80b4-5b20d9615fd6",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have content type JSON for request http://api.zippopotam.us/ca/B2R",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should have content type JSON for request http://api.zippopotam.us/ca/B2R",
              "timedOut": false,
              "duration": 218,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "chai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        expect(res,`... instead got ${ res.header['content-type']}`).to.have.header('content-type', 'application/json');\n        done();\n    });",
              "err": {},
              "uuid": "1900257a-f249-4bff-b556-ecf04ac4d1ec",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have a response time below 1s for request http://api.zippopotam.us/ca/B2R",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should have a response time below 1s for request http://api.zippopotam.us/ca/B2R",
              "timedOut": false,
              "duration": 222,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let start = new Date();\nchai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        let responseTime = new Date() - start;\n        expect(responseTime,`... instead took ${ responseTime }`).to.have.below(1000);\n        done();\n    });",
              "err": {},
              "uuid": "8bbc5d1d-868a-4f31-b308-47098dd3ce85",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should have country: ca and postal code: B2R for place name: Waverley",
              "fullTitle": "Zippopotam API data driven test - When the links are working as expected it ... should have country: ca and postal code: B2R for place name: Waverley",
              "timedOut": false,
              "duration": 243,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "let start = new Date();\nchai.request(url)\n    .get(`/${country}/${postal_code}`)\n    .end(function(err, res) {\n        expect(res.body['country abbreviation'],`... instead having ${ res.body['country abbreviation'] }`).to.equal(country.toUpperCase());\n        expect(res.body['post code'],`... instead having ${ res.body['post code'] }`).to.equal(postal_code);\n        expect(res.body.places[0]['place name'],`... instead having ${ res.body.places[0]['place name'] }`).to.equal(place_name);\n        done();\n    });",
              "err": {},
              "uuid": "ccf81503-0369-4177-8792-ecc7d164a62d",
              "parentUUID": "e4b2bf3e-ff15-4f4f-a36f-4c424dd9f9aa",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "9536abb5-36e1-44fc-975b-b3fb8a4559fe",
            "7fc90047-0c11-4694-984c-e101c3ab84e7",
            "a18257ef-7dd8-4a0f-ae2e-8d20418a2348",
            "432c8dca-e26a-4f0e-8d90-b2ab3a9d909f",
            "d7a1e124-15d8-4005-b0ac-b6ad3407375c",
            "79ffd79d-42f6-4fde-87e6-95ff5bf2d4da",
            "82af3c20-4725-4be5-a9ec-c1a97717c632",
            "08a625a8-d496-4e21-b87f-906a9b695063",
            "2ae84000-0c3e-4bbe-80b4-5b20d9615fd6",
            "1900257a-f249-4bff-b556-ecf04ac4d1ec",
            "8bbc5d1d-868a-4f31-b308-47098dd3ce85",
            "ccf81503-0369-4177-8792-ecc7d164a62d"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3257,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "8.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.1.1"
    },
    "marge": {
      "options": null,
      "version": "5.1.0"
    }
  }
}